---
title: "Problem 7"
jupyter: julia-1.10
---

## Problem Statement

By listing the first six prime numbers: $2,3,5,7,11$, and $13$, we can see that the
$6$th prime is $13$.

**What is the $10,001$st prime number?**

## Solution

### Trial Division

We can test whether a number is prime by *trial division*:
given an input number $n$, check whether it is divisible by any number between 2 and $\sqrt{n}$ (i.e., whether the division leaves no remainder).
If so, then $n$ is *composite*.
Otherwise, it is *prime*.\
For any divisor $p \geq \sqrt{n}$ there must be another divisor $q = \frac{n}{p} \textrm{ with } q^2 \leq n$, and therefore looking for divisors up to $\sqrt{n}$ is sufficient.

::: {.callout-note title="Definition of Primes"}
A natural number $n$ is **prime** if $n > 1$ and no number $p$ with $p^2 \leq n$ divides $n$. More formally

$P(n) \equiv n \in \mathbb{N} \land n > 1 \land \forall p((p > 1 \land p^2 \leq n) \Rightarrow \neg p|n).$
:::

Translating that definition into an algorithm, we check only for the number 2 and every subsequent odd number as divisors: 

```{julia}
function isPrime(n)
  n == 2 && return true
  n % 2 == 0 && return false
  k = 3
  while k * k <= n
    n % k == 0 && return false
    k += 2
  end
  true
end

@assert isPrime(13)

for n in 3:2:20
  @show n, isPrime(n)
end
```


Now, for solving the problem, we'll iterate over all odd numbers and check whether the
current number is prime, using our `isPrime` function.
If so, we increase the prime-counter by 1, until that counter reaches the given limit,
and finally return the current number.

```{julia}
function solveTrial(n)
  primes = 1
  k = 1
  while primes < n
    k += 2
    isPrime(k) ? primes += 1 : nothing
  end
  k
end

@assert solveTrial(6) == 13
```


### Sieve of Eratosthenes

We'll use again the *sieve of Eratosthenes* for generating the 10,001st prime number, which will be much more efficient than the *trial division* from above.

The problem is that we don't know in advance with which value we should call the `sieve` function, that is, up to which number potential primes should be created.
Of course, we could find that limit with *trial and error*, but since this is a course in mathematics, we should try to get a more reasonable answer.

Using the prime number theorem $\pi(n) \sim \frac{n}{\ln n}$, we can set $\pi(n)$ to $10001$, and as we know that the number of primes per constant interval decreases with growing $n$, we can write this as the inequality $10001 \geq \frac{n}{\ln n}$.

Making some educated guesses for $n$, we can check if this inequality holds:

* $90000 \div \ln{90000} \approx 7889$
* $105000 \div ln{105000} \approx 9081$
* $120000 \div ln{120000} \approx 10260$

We set $n = 105000$, the biggest value for which $\frac{n}{\ln n} \leq 10001$:

```{julia}
function solveSieve(n)
  function sieve(limit::Int)
    primes = Vector{Int}()
    isPrime = trues(limit+1)
    for i in 2:limit
      if isPrime[i]
        push!(primes, i)
        for j in i:div(limit, i)
          isPrime[i*j] = false
        end
      end
    end
    primes
  end

  sieve(105_000)[n]
end

@assert solveSieve(6) == 13
@assert solveSieve(10_001) == solveTrial(10_001)
```
Finally, let's do the obligatory benchmarks:

```{julia}
using BenchmarkTools
@benchmark solveTrial(10_001)
```

```{julia}
@benchmark solveSieve(10_001)
```

We see that `solveSieve` is 5 times faster than `solveTrial`, even though it's allocating
objects in the heap.
