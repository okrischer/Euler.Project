---
title: "Problem 3"
jupyter: julia-1.10
---

## Problem Statement

The prime factors of 13195 are 5, 7, 13 and 29.

**What is the largest prime factor of the number 600851475143?**

## Solution
### Naive Solution

A prime factor is a number which divides the given number and is itself prime.
A number is prime if it is only divisible by 1 or itself.

A naive way to compute these prime factors would be to iterate over all natural numbers
from 2 up to the given number, and to check whether thosen numbers evenly divide the given
number (without a remainder).
If so, iterate again over all natural numbers from 2 up to the found factor in
order to check whether the factor is a prime number.
If any number divides the factor, the factor is not prime.

Observe that we actually only need to test up to squareroot of $n$ for checking primes,
as there cannot be a factor $k$ with $k > \sqrt{n}$ and $k^2 <= n$.


```{julia}
#| output: false

function naive(n)
  for f in 2:div(n, 2)
    if n % f == 0 # f is a factor of n
      prime = true
      for k in 2:sqrt(f)
        if f % k == 0 # f is not prime
          prime = false
          break
        end
      end
      prime && println(f)
    end
  end
end
```

```{julia}
naive(13195)
```

While this algorithm works well for small $n$ it's not suitable for larger numbers,
because of the two nested for-loops, which result in a running time of $\mathcal{O}(n \sqrt{n})$.

### Sieve of Eratosthenes

What if we tried the other way round?
Instead of running through all natural numbers we could just check whether any prime
number divides $n$, and if so, this number is a prime factor.
But for that we need a list of prime numbers at first.

To that purpose we use the *Sieve of Eratosthenes*, which is an ancient algorithm for
finding all prime numbers up to a given limit.\
It does so by iteratively marking as composite (i.e., not prime) the multiples of each
prime, starting with the first prime number.
Once all the multiples of each discovered prime have been marked as composites, the
remaining unmarked numbers are primes.

![Sieve of Eratosthenes](https://upload.wikimedia.org/wikipedia/commons/9/94/Animation_Sieve_of_Eratosth.gif){align="center"}

```{julia}
function sieve(n::Int)
  isPrime = trues(n+1)
  primes = Vector{Int}()
  for i in 2:n
    if isPrime[i]
      push!(primes, i)
      for j in i:div(n, i)
        isPrime[i*j] = false
      end
    end
  end
  primes
end

length(sieve(120))
```

We get 30 primes for $n=120$, which corresponds to the animation above.

The running time of the `sieve` is much better than that of the `generate` function: it is proportional to

$$
\sum_{i=2}^n \frac{n}{i} =  n \sum_{i=2}^n \frac{1}{i} \leq n \int_1^n \frac{1}{x} dx = n \ln n, \textrm{ thus } \mathcal{O}(n \log n).
$$

Furthermore, since the inner loop is executed for prime numbers only, the
running time is even less: it can be shown that the actual running time for the
*sieve of Eratosthenes* is $\mathcal{O}(n \log \log n)$.
Not bad for an ancient algorithm.

Equipped with this insight, we can use the generated prime numbers for solving the
problem more efficiently:

```{julia}
function efficient(n)
  maxFactor = 1
  for i in sieve(10000)
    if n%i == 0
      maxFactor = i > maxFactor ? i : maxFactor
    end
  end
  maxFactor
end

@assert efficient(13195) == 29
```

### Prime Factorization

The key to this solution is a simple idea:
*instead of just checking if a number divides $n$ we actually divide $n$ by this number*.

Repeatedly dividing $n$ by its factors decreases $n$ very fast, making early
termination of the algorithm possible.

The algorithm works as follows:\
for each integer number $k \geq 2$, if $k$ is a factor of $n$, divide $n$ by $k$
and completely divide out each $k$ before moving to the next $k$.
When the next $k$ is a factor it will necessarily be prime, as all smaller factors
have already been removed.
After dividing out all prime factors $n$ will equal to 1.

```{julia}
#| output: false
#| lst-label: lst-primefact
function optimized(n)
  while n % 2 == 0          # <1>
    n = div(n, 2)
  end
  k = 3                     # <2>
  while k * k <= n          # <3>
    while n % k == 0        # <4>
      n = div(n, k)
    end
    n == 1 && return k      # <5>
    k += 2                  # <6>
  end
  n                         # <7>
end
```
1. divide out all 2's in order to omit even numbers in the main loop - see (6)
2. set `k` to the first odd prime number
3. set upper limit for `k` to $\sqrt{n}$
4. if `k` is a factor of `n`, divide out all `k`'s
5. return the current factor if `n` equals 1
6. omit all even numbers
7. return `n` as the largest remaining factor.

Steps (3), (5) and (7) deserve an extra explanation:\
we can restrict the upper limit of possible factors to $\sqrt{n}$ (3), as every number
$n$ can at most have one prime factor greater than $\sqrt{n}$.
If $n$ equals 1, all factors have been divided out, and the current factor (which
is necessarily the largest factor) is returned (5).
If $n$ doesn't equal 1 after finishing the main loop, the upper limit of
$\sqrt{n}$ for $k$ has been reached.
In this case we return $n$ as the only remaining factor (7).

```{julia}
using BenchmarkTools
@assert optimized(13195) == 29
@assert optimized(600851475143) == efficient(600851475143)
@btime efficient(600851475143)
@btime optimized(600851475143)
"🏁"
```

This `optimized` implementation uses a loop for dividing out all factors of 2,
and two nested loops for dividing out all remaining factors.
If you're wondering how difficult it would be to convert the three loops into recursive
calls within one function, here's my answer (again with `Haskell`)

```haskell
factorize n = divide n
  where
  divide n
    | even n = divide (n `div` 2)
    | otherwise = factor n 3
  factor m k
    | m == 1 = k
    | k * k > m = m
    | m `rem` k == 0 = factor (m `div` k) k
    | otherwise = factor m (k+2)
```

leading to an equivalent running time.