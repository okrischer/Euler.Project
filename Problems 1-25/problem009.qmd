---
title: "Problem 9"
jupyter: julia-1.10
---

## Problem Statement

A Pythagorean triplet is a set of three natural numbers, $a < b < c$, for which,

$$
a^2 + b^2 = c^2.
$$

For example, $3^2 + 4^2 = 9 + 16 = 25 = 5^2$.

There exists exactly one Pythagorean triplet for which $a+b+c = 1000$.\
**Find the product $abc$.**

## Solution

We'll discuss the more general problem of finding all Pythagorean triplets with $a+ b+c=s$ for some given $s$.

### Naive Solution

The most straightforward approach is to simply loop over $a$ and $b$ and then check
whether $a^2+b^2=(s-a-b)^2$.


```{julia}
function solve(s::Int)
  for a in 3:div(s-3, 3)
    for b in a+1:div(s-1-a, 2)
      c = s - a - b
      c^2 == a^2 + b^2 && return a*b*c
    end
  end
end

@assert solve(3+4+5) == 3*4*5
```

This algorithm is sufficiently fast for small enough $s$, but it doesn’t scale well.
If you multiply the value of $s$ by a factor $k$, the span of each of the two loops
is multiplied by the same factor and since the loops are nested, the number of
cases to check is multiplied by $k^2$.
So if $s$ is doubled, the function takes approximately four times as long and increasing $s$ by a factor of 10 increases the run time by a factor of approximately 100.

```{julia}
using BenchmarkTools
@btime solve(1000)
"🏁"
```

```{julia}
@btime solve(2000)
"🏁"
```

```{julia}
@btime solve(10000)
"🏁"
```

### Euclid's Formula

A *primitive* Pythagorean triple is one in which $(a, b, c)$ are *coprime* (that is, they have no common divisor larger than 1).
For example, (3, 4, 5) is a primitive Pythagorean triple whereas (6, 8, 10) is not. Every Pythagorean triple can be scaled to a *unique primitive* Pythagorean triple by dividing (a, b, c) by their *greatest common divisor*.
Conversely, every Pythagorean triple can be obtained by multiplying the elements of a primitive Pythagorean triple by a positive integer (the same for the three elements).

**Euclid's formula** is a fundamental formula for generating Pythagorean triples given an arbitrary pair of integers $m$ and $n$ with $m > n > 0$.
The formula states that the integers

$$
a = m^2 - n^2, \ b = 2mn, \ c = m^2 + n^2
$$ {#eq-euclid}

form a Pythagorean triple.

Despite generating all primitive triples, Euclid's formula does not produce all triples; for example, (9, 12, 15) cannot be generated using integer $m$ and $n$.
This can be remedied by inserting an additional parameter $k$ to the formula.
The following will generate all Pythagorean triples uniquely:

$$
a = k \cdot (m^2 - n^2), \ b = k \cdot (2mn), \ c = k \cdot (m^2 + n^2)
$$ {#eq-generator}

where $m, n \textrm{ and } k$ are positive integers with $m > n > 0$, $m$ and $n$ coprime, and $k$ is the *gcd* of $a, b \textrm{ and } c$.

Using that formula we see

$$
\begin{align}
s = a+b+c &= k \cdot (2m^2 + 2mn)\\
&= k \cdot 2 \cdot m \cdot (m+n)
\end{align}
$$ {#eq-sumformula}

So to find a Pythagorean triplet (a, b, c) with $a + b + c = s$, we have to find a divisor $m$ of $\frac{s}{2}$ and an odd divisor $d = m+n$ of $\frac{s}{2m}$ with $m<d<2m$ and $gcd(d, m) = 1$.\
Then set $n=d-m$, $k=\frac{s}{2md}$ and plug these into @eq-generator, leading to the following implementation:

```{julia}
function euclid(s::Int)
  s2 = div(s, 2)
  mlim = Int(ceil(sqrt(s2))) - 1
  for m in 2:mlim
    if s2 % m == 0
      sm = div(s2, m)
      while sm % 2 == 0
        sm = div(sm, 2)
      end
      m % 2 == 1 ? d = m+2 : d = m+1
      while d < 2m && d <= sm
        if sm % d == 0 && gcd(d, m) == 1
          k = div(s2, d*m)
          n = d-m
          a = k*(m^2 - n^2)
          b = 2k * m * n
          c = k*(m^2 + n^2)
          return a*b*c
        end
        d += 2
      end
    end
  end
end

@assert euclid(3+4+5) == 3*4*5
@assert euclid(1000) == solve(1000)
```

```{julia}
@btime euclid(1000)
"🏁"
```
```{julia}
@btime euclid(2000)
"🏁"
```

```{julia}
@btime euclid(10000)
"🏁"
```
The benchmark results show that the running time of `euclid` is constant, that is, the algorithm is equivalent to a closed formula.